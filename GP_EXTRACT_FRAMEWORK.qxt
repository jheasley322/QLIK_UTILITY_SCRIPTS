SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;($#,##0.00)';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';


//insert this line to call this script:
//*************************************************************************************************
//     $(Must_Include='lib://Qlik Network Folders\Application Scripts\Extract\DataWarehouse.qxt');
//*************************************************************************************************

// Setting to reload data in full or just partial

LET vReloadType = 1;  // uncomment this to force a specific reload type 
// || 0 = Partial || 1 = History ||
// Let vMode = If(Match(Weekday(today()),'Sun'),1,0);
// Let vReloadType = $(vMode);

//====================================TABLE LISTING========================================
// these are the current tables being exctracted in this app:
/* iterative extracts:
        PM20000
        PM30200
        GL10000
        GL20000
        GL30000
*/
/* static extracts:
        PM00200
        GL00100
        GL00105
        GL10001
*/
//=========================================================================================


//-----------------------------------------------------------------------------------------
//*************************************CALL STATEMENTS*************************************
    Sub GP_BU_Extract(connection,busunit)
        //connection name must match extactly
        //busunit must be the DB name from GP
    
        let Filepath = 'Qlik Network Folders\GP\1_Source_QVD';
        let SourceFolder = '$(busunit)';
        let HistoryYears= 2;

        Call StaticTables;

        IF vReloadType = 1 THEN
            CALL getHistory;
        ELSE
            CALL getUpdated;
        ENDIF

        //-----------------------------------------------------------------
        //Create one Qvd for table only with x years back and current year
        //*****************************************************************
        // CALL CreateQvd('TableName');
        // Need one for EACH table that is being extracted in the app
        //*****************************************************************
            // CALL CreateQvd('TableName')
            CALL CreateQvd('PM20000');
            CALL CreateQvd('PM30200');
            CALL CreateQvd('GL10000');
            CALL CreateQvd('GL20000');
            CALL CreateQvd('GL30000');

            //repeats go here//
        //*****************************************************************
    End Sub;
//-----------------------------------------------------------------------------------------




//-----------------------------------------------------------------------------------------
//***************************************GET HISTORY***************************************
//######################## ADD CALLS FOR EACH TABLE IN THIS SECTION########################
    SUB getHistory

        //******************************************************************************
        // 	Name:			getHistory
        // 	Description: 	Gets all data from Start of the prior year and current year 
        //					and saves a year-month qvd
        //  Variable Info:  EndDate - should be the end of the current month
        //                  MinDate - Historical  reload Start Date
        //                  MaxDate - End of Month of MinDate
        //                  YearMonth - used for naming QVDs
        //******************************************************************************



        LET vEndDate = Date(MonthEnd(Today()) + 1,'M/D/YYYY');
        LET vMinDate = Date(AddYears(YearStart(vEndDate),-$(HistoryYears)),'M/D/YYYY');

        LET vMaxDate 	= Date(MonthEnd(vMinDate) + 1,'M/D/YYYY');
        LET vYearMonth 	= Year(vMinDate)&Num(Month(vMinDate),'00');

        DO WHILE vEndDate >= vMaxDate
            TRACE ;
            TRACE Date >= $(vMinDate) AND Date < $(vMaxDate) Period $(vYearMonth);

            // Getting data ranges by create date
            //Set a Call Statement for each Table to be Extracted
            //***************************************************
            // TableName (pOwner,pTableName,pDateField)
            //      pOwner = table owner/schema
            //      pTableName = name of table within the schema
            //      pDateField = key date that should be used in extraction
            //      "pOwner"."pTableName" is inserted in the sql statement
            //
            // Each table needs to be extracted by YearMonth of a 
            // key date field and stored out to a comon location
            // for later concatenation
            //***************************************************

            //Call TableName ('pOwner','pTableName','pDateField')
            // example       'reportdb','bnfi_invoice','create_date' 
            
            Call PM20000 ('$(busunit)','PM20000','DOCDATE');  
            Call PM30200 ('$(busunit)','PM30200','DOCDATE'); 

            Call GL10000 ('$(busunit)','GL10000','TRXDATE');
            Call GL20000 ('$(busunit)','GL20000','TRXDATE');
            Call GL30000 ('$(busunit)','GL30000','TRXDATE');
            Call VND_PAY_DET ('$(busunit)','VND_PAY_DET','PSTGDATE');    
        	
            //Setting variables for next step
            LET vMinDate 	= vMaxDate;
            LET vMaxDate 	= Date(MonthEnd(vMinDate) + 1,'M/D/YYYY');
            LET vYearMonth 	= Year(vMinDate)&Num(Month(vMinDate),'00'); // For qvd name
            
        LOOP;

    END SUB;
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
//***********************************GET UPDATED*******************************************
//######################## ADD CALLS FOR EACH TABLE IN THIS SECTION########################
    SUB getUpdated
		trace doing getupdate;
        //******************************************************************************
        // 	Name:			getUpdated
        // 	Description: 	Gets only updated records based on the update date field and 
        //					saves into the appropriate year-month qvd based on create date
        //******************************************************************************

        LET vMinDate = Date(Today()-5,'M/D/YYYY'); //Always gets 5 days before, just in case one day it did not run
        LET vMaxDate = Date(Today()+1,'M/D/YYYY');

        /*//TableName
        Call SubName('Owner','Tablename','KeyModifyDate');
        Call UpdateQvds('TableName','KeyDate','PrimaryKey') */

        //PM20000
        Call PM20000('$(busunit)','PM20000','DEX_ROW_TS');
        Call UpdateQvds('PM20000','DOCDATE','DEX_ROW_ID');    

        //PM30200
        Call PM30200('$(busunit)','PM30200','DEX_ROW_TS');
        Call UpdateQvds('PM30200','DOCDATE','DEX_ROW_ID');   

        //GL10000
        Call GL10000('$(busunit)','GL10000','DEX_ROW_TS');
        Call UpdateQvds('GL10000','TRXDATE','DEX_ROW_ID'); 

        //GL20000
        Call GL20000('$(busunit)','GL20000','DEX_ROW_TS');
        Call UpdateQvds('GL20000','TRXDATE','DEX_ROW_ID'); 

        //GL30000
        Call GL30000('$(busunit)','GL30000','DEX_ROW_TS');
        Call UpdateQvds('GL30000','TRXDATE','DEX_ROW_ID');

        //VND_PAY_DET
        Call VND_PAY_DET('$(busunit)','VND_PAY_DET','DEX_ROW_TS');
        Call UpdateQvds('VND_PAY_DET','TRXDATE','DEX_ROW_ID');     

    END SUB;
//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
//*****************************************************************************************
//***************************************TABLENAME*****************************************
//**************************This section is a repeating section for************************
//**************************each database table that needs extraction**********************


    //SAMPLE HERE----------
        /* //*********************************TABLENAME1*********************************
        //**************************SAMPLE****SAMPLE****SAMPLE***************************
        SUB TableName(pOwner,pTableName,pDateField)
            // the Name of the Sub 
            // should be the same 
            // as pTableName for 
            // ease of use


            [$(pTableName)]:
            SELECT 
                "Field_1", 
                "Field_2", 
                "Field_3"
            FROM "$(pOwner)"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= TO_DATE('$(vMinDate)','M/D/YYYY') 
                AND "$(pDateField)" < TO_DATE('$(vMaxDate)','M/D/YYYY');


            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB; */
    //---------------------

//***************************************GP TABLE DETAILS**********************************

    //************************************PM20000******************************************
        SUB PM20000(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                VCHRNMBR,
                VENDORID,
                DOCTYPE,
                DOCDATE,
                DOCNUMBR,
                DOCAMNT,
                CURTRXAM,
                DISTKNAM,
                DISCAMNT,
                DSCDLRAM,
                BACHNUMB,
                TRXSORCE,
                BCHSOURC,
                DISCDATE,
                DUEDATE,
                PORDNMBR,
                TEN99AMNT,
                WROFAMNT,
                DISAMTAV,
                TRXDSCRN,
                UN1099AM,
                BKTPURAM,
                BKTFRTAM,
                BKTMSCAM,
                VOIDED,
                HOLD,
                CHEKBKID,
                DINVPDOF,
                PPSAMDED,
                PPSTAXRT,
                PGRAMSBJ,
                GSTDSAMT,
                POSTEDDT,
                PTDUSRID,
                MODIFDT,
                MDFUSRID,
                PYENTTYP,
                CARDNAME,
                PRCHAMNT,
                TRDISAMT,
                MSCCHAMT,
                FRTAMNT,
                TAXAMNT,
                TTLPYMTS,
                CURNCYID,
                PYMTRMID,
                SHIPMTHD,
                TAXSCHID,
                PCHSCHID,
                FRTSCHID,
                MSCSCHID,
                PSTGDATE,
                DISAVTKN,
                CNTRLTYP,
                NOTEINDX,
                PRCTDISC,
                RETNAGAM,
                ICTRX,
                "Tax_Date",
                PRCHDATE,
                CORRCTN,
                SIMPLIFD,
                APLYWITH,
                Electronic,
                ECTRX,
                DocPrinted,
                TaxInvReqd,
                VNDCHKNM,
                BackoutTradeDisc,
                CBVAT,
                VADCDTRO,
                TEN99TYPE,
                TEN99BOXNUMBER,
                PONUMBER,
                "Workflow_Status",
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


    //************************************PM30200******************************************
        SUB PM30200(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                VCHRNMBR,
                VENDORID,
                DOCTYPE,
                DOCDATE,
                DOCNUMBR,
                DOCAMNT,
                CURTRXAM,
                DISTKNAM,
                DISCAMNT,
                DSCDLRAM,
                BACHNUMB,
                TRXSORCE,
                BCHSOURC,
                DISCDATE,
                DUEDATE,
                PORDNMBR,
                TEN99AMNT,
                WROFAMNT,
                DISAMTAV,
                TRXDSCRN,
                UN1099AM,
                BKTPURAM,
                BKTFRTAM,
                BKTMSCAM,
                VOIDED,
                HOLD,
                CHEKBKID,
                DINVPDOF,
                PPSAMDED,
                PPSTAXRT,
                PGRAMSBJ,
                GSTDSAMT,
                POSTEDDT,
                PTDUSRID,
                MODIFDT,
                MDFUSRID,
                PYENTTYP,
                CARDNAME,
                PRCHAMNT,
                TRDISAMT,
                MSCCHAMT,
                FRTAMNT,
                TAXAMNT,
                TTLPYMTS,
                CURNCYID,
                PYMTRMID,
                SHIPMTHD,
                TAXSCHID,
                PCHSCHID,
                FRTSCHID,
                MSCSCHID,
                PSTGDATE,
                DISAVTKN,
                CNTRLTYP,
                NOTEINDX,
                PRCTDISC,
                RETNAGAM,
                VOIDPDATE,
                ICTRX,
                "Tax_Date",
                PRCHDATE,
                CORRCTN,
                SIMPLIFD,
                APLYWITH,
                Electronic,
                ECTRX,
                DocPrinted,
                TaxInvReqd,
                VNDCHKNM,
                BackoutTradeDisc,
                CBVAT,
                VADCDTRO,
                TEN99TYPE,
                TEN99BOXNUMBER,
                PONUMBER,
                "Workflow_Status",
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    //************************************GL10000******************************************
        SUB GL10000(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                BACHNUMB,
                BCHSOURC,
                JRNENTRY,
                RCTRXSEQ,
                SOURCDOC,
                REFRENCE,
                TRXDATE,
                RVRSNGDT,
                RCRNGTRX,
                BALFRCLC,
                PSTGSTUS,
                LASTUSER,
                LSTDTEDT,
                USWHPSTD,
                TRXTYPE,
                SQNCLINE,
                GLHDRMSG,
                GLHDRMS2,
                TRXSORCE,
                RVTRXSRC,
                SERIES,
                ORPSTDDT,
                ORTRXSRC,
                OrigDTASeries,
                DTAControlNum,
                DTATRXType,
                "DTA_Index",
                CURNCYID,
                CURRNIDX,
                RATETPID,
                EXGTBLID,
                XCHGRATE,
                EXCHDATE,
                TIME1,
                RTCLCMTD,
                NOTEINDX,
                GLHDRVAL,
                PERIODID,
                OPENYEAR,
                CLOSEDYR,
                HISTRX,
                REVPRDID,
                REVYEAR,
                REVCLYR,
                REVHIST,
                ERRSTATE,
                ICTRX,
                ORCOMID,
                ORIGINJE,
                ICDISTS,
                PRNTSTUS,
                DENXRATE,
                MCTRXSTT,
                DOCDATE,
                "Tax_Date",
                VOIDED,
                "Original_JE",
                "Original_JE_Year",
                "Original_JE_Seq_Num",
                "Correcting_Trx_Type",
                "Ledger_ID",
                "Adjustment_Transaction",
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    //************************************GL20000******************************************
        SUB GL20000(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                OPENYEAR,
                JRNENTRY,
                RCTRXSEQ,
                SOURCDOC,
                REFRENCE,
                DSCRIPTN,
                TRXDATE,
                TRXSORCE,
                ACTINDX,
                POLLDTRX,
                LASTUSER,
                LSTDTEDT,
                USWHPSTD,
                ORGNTSRC,
                ORGNATYP,
                QKOFSET,
                SERIES,
                ORTRXTYP,
                ORCTRNUM,
                ORMSTRID,
                ORMSTRNM,
                ORDOCNUM,
                ORPSTDDT,
                ORTRXSRC,
                OrigDTASeries,
                OrigSeqNum,
                SEQNUMBR,
                "DTA_GL_Status",
                "DTA_Index",
                CURNCYID,
                CURRNIDX,
                RATETPID,
                EXGTBLID,
                XCHGRATE,
                EXCHDATE,
                TIME1,
                RTCLCMTD,
                NOTEINDX,
                ICTRX,
                ORCOMID,
                ORIGINJE,
                PERIODID,
                DEBITAMT,
                CRDTAMNT,
                ORDBTAMT,
                ORCRDAMT,
                DOCDATE,
                PSTGNMBR,
                PPSGNMBR,
                DENXRATE,
                MCTRXSTT,
                CorrespondingUnit,
                VOIDED,
                "Back_Out_JE",
                "Back_Out_JE_Year",
                "Correcting_JE",
                "Correcting_JE_Year",
                "Original_JE",
                "Original_JE_Seq_Num",
                "Original_JE_Year",
                "Ledger_ID",
                "Adjustment_Transaction",
                APRVLUSERID,
                APPRVLDT,
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    //************************************GL30000******************************************
        SUB GL30000(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                HSTYEAR,
                JRNENTRY,
                RCTRXSEQ,
                SOURCDOC,
                REFRENCE,
                DSCRIPTN,
                TRXDATE,
                ACTINDX,
                TRXSORCE,
                POLLDTRX,
                LASTUSER,
                LSTDTEDT,
                USWHPSTD,
                ORGNTSRC,
                ORGNATYP,
                QKOFSET,
                SERIES,
                ORTRXTYP,
                ORCTRNUM,
                ORMSTRID,
                ORMSTRNM,
                ORDOCNUM,
                ORPSTDDT,
                ORTRXSRC,
                OrigDTASeries,
                OrigSeqNum,
                SEQNUMBR,
                "DTA_GL_Status",
                "DTA_Index",
                CURNCYID,
                CURRNIDX,
                RATETPID,
                EXGTBLID,
                XCHGRATE,
                EXCHDATE,
                TIME1,
                RTCLCMTD,
                NOTEINDX,
                ICTRX,
                ORCOMID,
                ORIGINJE,
                PERIODID,
                DEBITAMT,
                CRDTAMNT,
                ORDBTAMT,
                ORCRDAMT,
                DOCDATE,
                PSTGNMBR,
                PPSGNMBR,
                DENXRATE,
                MCTRXSTT,
                CorrespondingUnit,
                VOIDED,
                "Back_Out_JE",
                "Back_Out_JE_Year",
                "Correcting_JE",
                "Correcting_JE_Year",
                "Original_JE",
                "Original_JE_Seq_Num",
                "Original_JE_Year",
                "Ledger_ID",
                "Adjustment_Transaction",
                APRVLUSERID,
                APPRVLDT,
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    //************************************GL30000******************************************
        SUB VND_PAY_DET(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                P.VENDORID Vendor_ID,
                V.VENDNAME Vendor_Name,
                V.VNDCHKNM Vendor_Check_Name,
                CASE P.PYENTTYP
                    WHEN 0 THEN 'Check'
                    WHEN 1 THEN 'Cash'
                    WHEN 2 THEN 'Credit Card'
                    WHEN 3 THEN 'EFT'
                    ELSE 'Other'
                    END Payment_Type,
                CASE
                    WHEN P.PYENTTYP in (0,1,3) THEN P.CHEKBKID
                    ELSE ''
                    END Checkbook_ID,
                CASE P.PYENTTYP
                    WHEN 2 THEN P.CARDNAME
                    ELSE ''
                    END Credit_Card_ID,
                P.DOCDATE Payment_Date,
                P.PSTGDATE Payment_GL_Date,
                P.DEX_ROW_ID DEX_ROW_ID,
                P.DEX_ROW_TS DEX_ROW_TS,
                P.VCHRNMBR Payment_Voucher_Number,
                P.DOCNUMBR Payment_Document_Number,
                P.DOCAMNT Payment_Functional_Amount,
                coalesce(PA.APTVCHNM,'') Apply_To_Voucher_Number,
                CASE PA.APTODCTY
                    WHEN 1 THEN 'Invoice'
                    WHEN 2 THEN 'Finance Charge'
                    WHEN 3 THEN 'Misc Charge'
                    ELSE ''
                    END Apply_To_Doc_Type,
                coalesce(PA.APTODCNM,'') Apply_To_Doc_Number,
                coalesce(PA.APTODCDT,'1/1/1900') Apply_To_Doc_Date,
                coalesce(PA.ApplyToGLPostDate,'1/1/1900') Apply_To_GL_Date,
                coalesce(AD.DUEDATE,'1/1/1900') Apply_To_Due_Date,
                coalesce(PA.APPLDAMT,0) Applied_Amount,
                coalesce(G.ACTNUMST,'') GL_Account_Number,
                coalesce(G2.ACTDESCR,'') GL_Account_Name,
                CASE D.DISTTYPE
                    WHEN 1 THEN 'Cash'
                    WHEN 2 THEN 'Payable'
                    WHEN 3 THEN 'Discount Available'
                    WHEN 4 THEN 'Discount Taken'
                    WHEN 5 THEN 'Finance Charge'
                    WHEN 6 THEN 'Purchase'
                    WHEN 7 THEN 'Trade Disc.'
                    WHEN 8 THEN 'Misc. Charge'
                    WHEN 9 THEN 'Freight'
                    WHEN 10 THEN 'Taxes'
                    WHEN 11 THEN 'Writeoffs'
                    WHEN 12 THEN 'Other'
                    WHEN 13 THEN 'GST Disc'
                    WHEN 14 THEN 'PPS Amount'
                    ELSE ''
                    END Distribution_Type,
                coalesce(D.DEBITAMT,0) Debit,
                coalesce(D.CRDTAMNT,0) Credit,
                coalesce(D.DistRef,'') Distribution_Reference,
                AD.TRXDSCRN Transaction_Description
                
                FROM -- payments
                (SELECT VENDORID, DOCTYPE, DOCDATE, VCHRNMBR, DOCNUMBR, 
                DOCAMNT, VOIDED, TRXSORCE, CHEKBKID, PSTGDATE, PYENTTYP, 
                CARDNAME, DEX_ROW_TS, DEX_ROW_ID
                FROM PM30200 
                WHERE DOCTYPE = 6 AND DOCAMNT <> 0 AND VOIDED = 0 AND "$(pDateField)" >= '$(vMinDate)' AND "$(pDateField)" < '$(vMaxDate)'
                UNION
                SELECT VENDORID, DOCTYPE, DOCDATE, VCHRNMBR, DOCNUMBR, 
                DOCAMNT, VOIDED, TRXSORCE, CHEKBKID, PSTGDATE, PYENTTYP, 
                CARDNAME, DEX_ROW_TS, DEX_ROW_ID
                FROM PM20000 
                WHERE DOCTYPE = 6 AND DOCAMNT <> 0 AND VOIDED = 0 AND "$(pDateField)" >= '$(vMinDate)' AND "$(pDateField)" < '$(vMaxDate)') P
                
                INNER JOIN PM00200 V -- vendor master
                    ON P.VENDORID = V.VENDORID
                
                LEFT OUTER JOIN -- apply records
                (SELECT VENDORID, VCHRNMBR, DOCTYPE, APTVCHNM, APTODCTY,
                APTODCNM, APTODCDT, ApplyToGLPostDate, APPLDAMT
                FROM PM10200
                UNION
                SELECT VENDORID, VCHRNMBR, DOCTYPE, APTVCHNM, APTODCTY,
                APTODCNM, APTODCDT, ApplyToGLPostDate, APPLDAMT
                FROM PM30300) PA 
                    ON P.VCHRNMBR = PA.VCHRNMBR AND P.VENDORID = PA.VENDORID 
                    AND P.DOCTYPE = PA.DOCTYPE
                
                LEFT OUTER JOIN -- distributions
                (SELECT VENDORID, VCHRNMBR, CNTRLTYP, DEBITAMT, CRDTAMNT,
                DSTINDX, DISTTYPE, DistRef, PSTGDATE
                FROM PM10100
                WHERE PSTGSTUS = 1 AND CNTRLTYP = 0
                UNION ALL
                SELECT VENDORID, VCHRNMBR, CNTRLTYP, DEBITAMT, CRDTAMNT,
                DSTINDX, DISTTYPE, DistRef, PSTGDATE
                FROM PM30600 WHERE CNTRLTYP = 0) D 
                    ON PA.VENDORID = D.VENDORID AND PA.APTVCHNM = D.VCHRNMBR
                
                LEFT OUTER JOIN GL00105 G -- for account number
                    ON D.DSTINDX = G.ACTINDX
                
                LEFT OUTER JOIN GL00100 G2 -- for account name
                    ON D.DSTINDX = G2.ACTINDX
                
                LEFT OUTER JOIN -- apply to docs, added for due date
                (SELECT DOCTYPE, VCHRNMBR, DUEDATE, TRXDSCRN 
                FROM PM30200
                UNION
                SELECT DOCTYPE, VCHRNMBR, DUEDATE, TRXDSCRN
                FROM PM20000) AD 
                    ON PA.APTODCTY = AD.DOCTYPE and PA.APTVCHNM = AD.VCHRNMBR
                    ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//*****************************************************************************************


//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
//**************************************CREATE QVD*****************************************
    SUB CreateQvd(pTableName)

        LET vMaxYear = Year(Today()); 	                // Current year
        LET vMinYear = vMaxYear-$(HistoryYears);

        DO WHILE vMinYear <= vMaxYear
            Trace $(vMinYear);
            
            [$(pTableName)]:
            LOAD *
            FROM 
                [lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vMinYear)*.qvd](qvd);

            LET vMinYear = vMinYear +1;        
        LOOP;

        STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\$(pTableName)_$(busunit).qvd';

        DROP TABLE [$(pTableName)];

    END SUB;
//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
//**************************************UPDATE QVD*****************************************
    SUB UpdateQvds(pTableName,pCreateDateField,pPrimaryKey)

        LET vMinYear = vMaxYear-$(HistoryYears);		// Should not exceed max historical extract ever performed

        //Creating a list for all monthly qvd files to be updated
        QvdList:
        Load
            DISTINCT
            Year($(pCreateDateField)) &	Num(Month($(pCreateDateField)),00)	AS YearMonth
        Resident
            $(pTableName)
        Where     
            Year($(pCreateDateField)) >= $(vMinYear);

        For i = 0 to NoOfRows('QvdList')-1
            LET vYearMonth = Peek('YearMonth',i,'QvdList');

            TRACE ;
            TRACE Updating monthly Qvd $(vYearMonth);

            NoConcatenate
            Updated:
            Load
                *
            Resident
                $(pTableName)
            Where
                Year($(pCreateDateField)) &	Num(Month($(pCreateDateField)),00) = $(vYearMonth);

            IF not IsNull(QvdTableName('[lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd]')) THEN
            
                CONCATENATE(Updated)
                Stored:
                LOAD
                    *
                From
                    [lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth)*.qvd](qvd)
                Where 
                    Not Exists($(pPrimaryKey),$(pPrimaryKey));
            ENDIF

            STORE Updated INTO [lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd];    
            DROP TABLE Updated;

        Next

        DROP TABLE QvdList;
        DROP TABLE $(pTableName);

    END SUB;
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
//***********************************STATIC TABLE EXTRACT**********************************
    Sub StaticTables
    
        LIB CONNECT TO '$(connection)';
        //vendor table
        [PM00200]:
        SELECT
            VENDORID,
            VENDNAME,
            VNDCHKNM,
            VENDSHNM,
            VADDCDPR,
            VADCDPAD,
            VADCDSFR,
            VADCDTRO,
            VNDCLSID,
            VNDCNTCT,
            ADDRESS1,
            ADDRESS2,
            ADDRESS3,
            CITY,
            STATE,
            ZIPCODE,
            COUNTRY,
            PHNUMBR1,
            PHNUMBR2,
            PHONE3,
            FAXNUMBR,
            UPSZONE,
            SHIPMTHD,
            TAXSCHID,
            ACNMVNDR,
            TXIDNMBR,
            VENDSTTS,
            CURNCYID,
            TXRGNNUM,
            PARVENID,
            TRDDISCT,
            TEN99TYPE,
            TEN99BOXNUMBER,
            MINORDER,
            PYMTRMID,
            MINPYTYP,
            MINPYPCT,
            MINPYDLR,
            MXIAFVND,
            MAXINDLR,
            COMMENT1,
            COMMENT2,
            USERDEF1,
            USERDEF2,
            CRLMTDLR,
            PYMNTPRI,
            KPCALHST,
            KGLDSTHS,
            KPERHIST,
            KPTRXHST,
            HOLD,
            PTCSHACF,
            CREDTLMT,
            WRITEOFF,
            MXWOFAMT,
            SBPPSDED,
            PPSTAXRT,
            DXVARNUM,
            CRTCOMDT,
            CRTEXPDT,
            RTOBUTKN,
            XPDTOBLG,
            PRSPAYEE,
            PMAPINDX,
            PMCSHIDX,
            PMDAVIDX,
            PMDTKIDX,
            PMFINIDX,
            PMMSCHIX,
            PMFRTIDX,
            PMTAXIDX,
            PMWRTIDX,
            PMPRCHIX,
            PMRTNGIX,
            PMTDSCIX,
            ACPURIDX,
            PURPVIDX,
            NOTEINDX,
            CHEKBKID,
            MODIFDT,
            CREATDDT,
            RATETPID,
            "Revalue_Vendor",
            "Post_Results_To",
            FREEONBOARD,
            GOVCRPID,
            GOVINDID,
            DISGRPER,
            DUEGRPER,
            DOCFMTID,
            TaxInvRecvd,
            USERLANG,
            WithholdingType,
            WithholdingFormType,
            WithholdingEntityType,
            TaxFileNumMode,
            BRTHDATE,
            LaborPmtType,
            CCode,
            DECLID,
            CBVAT,
            "Workflow_Approval_Status",
            "Workflow_Priority",
            "Workflow_Status",
            VADCD1099,
            "DEX_ROW_TS",
            "DEX_ROW_ID"
        FROM $(busunit).dbo.PM00200;
        STORE [PM00200] INTO 'lib://$(Filepath)\$(SourceFolder)\PM00200_$(busunit).qvd';
        DROP TABLE [PM00200];


        [GL00100]:
        SELECT 
            ACTINDX,
            "ACTNUMBR_1",
            "ACTNUMBR_2",
            "ACTNUMBR_3",
            "ACTNUMBR_4",
            "ACTNUMBR_5",
            "ACTNUMBR_6",
            "ACTNUMBR_7",
            "ACTNUMBR_8",
            ACTALIAS,
            MNACSGMT,
            ACCTTYPE,
            ACTDESCR,
            PSTNGTYP,
            ACCATNUM,
            ACTIVE,
            TPCLBLNC,
            DECPLACS,
            FXDORVAR,
            BALFRCLC,
            DSPLKUPS,
            CNVRMTHD,
            HSTRCLRT,
            NOTEINDX,
            CREATDDT,
            MODIFDT,
            USERDEF1,
            USERDEF2,
            PostSlsIn,
            PostIvIn,
            PostPurchIn,
            PostPRIn,
            ADJINFL,
            INFLAREV,
            INFLAEQU,
            ACCTENTR,
            USRDEFS1,
            USRDEFS2,
            "Clear_Balance",
            "DEX_ROW_TS",
            "DEX_ROW_ID"
        FROM $(busunit).dbo.GL00100;
        STORE [GL00100] INTO 'lib://$(Filepath)\$(SourceFolder)\GL00100_$(busunit).qvd';
        DROP TABLE [GL00100];

        [GL00105]:
        SELECT 
            ACTINDX,
            "ACTNUMBR_1",
            "ACTNUMBR_2",
            "ACTNUMBR_3",
            "ACTNUMBR_4",
            "ACTNUMBR_5",
            "ACTNUMBR_6",
            "ACTNUMBR_7",
            "ACTNUMBR_8",
            ACTNUMST,
            "DEX_ROW_ID"
        FROM $(busunit).dbo.GL00105;
        STORE [GL00105] INTO 'lib://$(Filepath)\$(SourceFolder)\GL00105_$(busunit).qvd';
        DROP TABLE [GL00105];   


        [GL10001]:
        SELECT 
            BACHNUMB,
            JRNENTRY,
            SQNCLINE,
            ACTINDX,
            XCHGRATE,
            DSCRIPTN,
            GLLINMSG,
            GLLINMS2,
            CURRNIDX,
            GLLINVAL,
            ACCTTYPE,
            FXDORVAR,
            BALFRCLC,
            PSTNGTYP,
            DECPLACS,
            ORCTRNUM,
            ORDOCNUM,
            ORMSTRID,
            ORMSTRNM,
            ORTRXTYP,
            OrigSeqNum,
            ORTRXDESC,
            "DTA_GL_Status",
            INTERID,
            RATETPID,
            EXGTBLID,
            EXCHDATE,
            TIME1,
            RTCLCMTD,
            DEBITAMT,
            CRDTAMNT,
            ORDBTAMT,
            ORCRDAMT,
            DENXRATE,
            MCTRXSTT,
            LNESTAT,
            CorrespondingUnit,
            "DEX_ROW_TS",
            "DEX_ROW_ID"  
        FROM $(busunit).dbo.GL10001;
        STORE [GL10001] INTO 'lib://$(Filepath)\$(SourceFolder)\GL10001_$(busunit).qvd';
        DROP TABLE [GL10001];  

    End Sub;
//-----------------------------------------------------------------------------------------



Call GP_BU_Extract('GP_OLBT','OLBT');
Call GP_BU_Extract('GP_CO','CO');
//add repeats for additional BU extractions