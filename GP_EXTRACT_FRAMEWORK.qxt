SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;($#,##0.00)';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';


//insert this line to call this script:
//*************************************************************************************************
//     $(Must_Include='lib://Qlik Network Folders\Application Scripts\Extract\DataWarehouse.qxt');
//*************************************************************************************************

// Setting to reload data in full or just partial

LET vReloadType = 1;  // uncomment this to force a specific reload type 
// || 0 = Partial || 1 = History ||
// Let vMode = If(Match(Weekday(today()),'Sun'),1,0);
// Let vReloadType = $(vMode);


//-----------------------------------------------------------------------------------------
//*************************************CALL STATEMENTS*************************************
    Sub GP_BU_Extract(connection,busunit)
        //connection name must match extactly
        //busunit must be the DB name from GP
    
        let Filepath = 'Qlik Network Folders\GP\1_Source_QVD';
        let SourceFolder = '$(busunit)';
        let HistoryYears= 2;

        Call StaticTables;

        IF vReloadType = 1 THEN
            CALL getHistory;
        ELSE
            CALL getUpdated;
        ENDIF

        //-----------------------------------------------------------------
        //Create one Qvd for table only with x years back and current year
        //*****************************************************************
        // CALL CreateQvd('TableName');
        // Need one for EACH table that is being extracted in the app
        //*****************************************************************
            // CALL CreateQvd('TableName')
            CALL CreateQvd('PM20000');
            CALL CreateQvd('PM30200');
            //repeats go here//
        //*****************************************************************
    End Sub;
//-----------------------------------------------------------------------------------------




//-----------------------------------------------------------------------------------------
//***************************************GET HISTORY***************************************
//######################## ADD CALLS FOR EACH TABLE IN THIS SECTION########################
    SUB getHistory

        //******************************************************************************
        // 	Name:			getHistory
        // 	Description: 	Gets all data from Start of the prior year and current year 
        //					and saves a year-month qvd
        //  Variable Info:  EndDate - should be the end of the current month
        //                  MinDate - Historical  reload Start Date
        //                  MaxDate - End of Month of MinDate
        //                  YearMonth - used for naming QVDs
        //******************************************************************************



        LET vEndDate = Date(MonthEnd(Today()) + 1,'M/D/YYYY');
        LET vMinDate = Date(AddYears(YearStart(vEndDate),-$(HistoryYears)),'M/D/YYYY');

        LET vMaxDate 	= Date(MonthEnd(vMinDate) + 1,'M/D/YYYY');
        LET vYearMonth 	= Year(vMinDate)&Num(Month(vMinDate),'00');

        DO WHILE vEndDate >= vMaxDate
            TRACE ;
            TRACE Date >= $(vMinDate) AND Date < $(vMaxDate) Period $(vYearMonth);

            // Getting data ranges by create date
            //Set a Call Statement for each Table to be Extracted
            //***************************************************
            // TableName (pOwner,pTableName,pDateField)
            //      pOwner = table owner/schema
            //      pTableName = name of table within the schema
            //      pDateField = key date that should be used in extraction
            //      "pOwner"."pTableName" is inserted in the sql statement
            //
            // Each table needs to be extracted by YearMonth of a 
            // key date field and stored out to a comon location
            // for later concatenation
            //***************************************************

            //Call TableName ('pOwner','pTableName','pDateField')
            // example       'reportdb','bnfi_invoice','create_date' 
            
            Call PM20000 ('$(busunit)','PM20000','DOCDATE');  
            Call PM20000 ('$(busunit)','PM30200','DOCDATE');   
        	
            //Setting variables for next step
            LET vMinDate 	= vMaxDate;
            LET vMaxDate 	= Date(MonthEnd(vMinDate) + 1,'M/D/YYYY');
            LET vYearMonth 	= Year(vMinDate)&Num(Month(vMinDate),'00'); // For qvd name
            
        LOOP;

    END SUB;
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
//***********************************GET UPDATED*******************************************
//######################## ADD CALLS FOR EACH TABLE IN THIS SECTION########################
    SUB getUpdated
		trace doing getupdate;
        //******************************************************************************
        // 	Name:			getUpdated
        // 	Description: 	Gets only updated records based on the update date field and 
        //					saves into the appropriate year-month qvd based on create date
        //******************************************************************************

        LET vMinDate = Date(Today()-5,'M/D/YYYY'); //Always gets 5 days before, just in case one day it did not run
        LET vMaxDate = Date(Today()+1,'M/D/YYYY');

        /*//TableName
        Call SubName('Owner','Tablename','KeyModifyDate');
        Call UpdateQvds('TableName','KeyDate','PrimaryKey') */

        //PM20000
        Call PM20000('$(busunit)','PM20000','DEX_ROW_TS');
        Call UpdateQvds('PM20000','DOCDATE','DEX_ROW_ID');    

        //PM30200
        Call PM30200('$(busunit)','PM30200','DEX_ROW_TS');
        Call UpdateQvds('PM30200','DOCDATE','DEX_ROW_ID');      

    END SUB;
//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
//*****************************************************************************************
//***************************************TABLENAME*****************************************
//**************************This section is a repeating section for************************
//**************************each database table that needs extraction**********************


    //SAMPLE HERE----------
        /* //*********************************TABLENAME1*********************************
        //**************************SAMPLE****SAMPLE****SAMPLE***************************
        SUB TableName(pOwner,pTableName,pDateField)
            // the Name of the Sub 
            // should be the same 
            // as pTableName for 
            // ease of use


            [$(pTableName)]:
            SELECT 
                "Field_1", 
                "Field_2", 
                "Field_3"
            FROM "$(pOwner)"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= TO_DATE('$(vMinDate)','M/D/YYYY') 
                AND "$(pDateField)" < TO_DATE('$(vMaxDate)','M/D/YYYY');


            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB; */
    //---------------------

//***************************************GP TABLE DETAILS**********************************

    //************************************PM20000******************************************
        SUB PM20000(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                VCHRNMBR,
                VENDORID,
                DOCTYPE,
                DOCDATE,
                DOCNUMBR,
                DOCAMNT,
                CURTRXAM,
                DISTKNAM,
                DISCAMNT,
                DSCDLRAM,
                BACHNUMB,
                TRXSORCE,
                BCHSOURC,
                DISCDATE,
                DUEDATE,
                PORDNMBR,
                TEN99AMNT,
                WROFAMNT,
                DISAMTAV,
                TRXDSCRN,
                UN1099AM,
                BKTPURAM,
                BKTFRTAM,
                BKTMSCAM,
                VOIDED,
                HOLD,
                CHEKBKID,
                DINVPDOF,
                PPSAMDED,
                PPSTAXRT,
                PGRAMSBJ,
                GSTDSAMT,
                POSTEDDT,
                PTDUSRID,
                MODIFDT,
                MDFUSRID,
                PYENTTYP,
                CARDNAME,
                PRCHAMNT,
                TRDISAMT,
                MSCCHAMT,
                FRTAMNT,
                TAXAMNT,
                TTLPYMTS,
                CURNCYID,
                PYMTRMID,
                SHIPMTHD,
                TAXSCHID,
                PCHSCHID,
                FRTSCHID,
                MSCSCHID,
                PSTGDATE,
                DISAVTKN,
                CNTRLTYP,
                NOTEINDX,
                PRCTDISC,
                RETNAGAM,
                ICTRX,
                "Tax_Date",
                PRCHDATE,
                CORRCTN,
                SIMPLIFD,
                APLYWITH,
                Electronic,
                ECTRX,
                DocPrinted,
                TaxInvReqd,
                VNDCHKNM,
                BackoutTradeDisc,
                CBVAT,
                VADCDTRO,
                TEN99TYPE,
                TEN99BOXNUMBER,
                PONUMBER,
                "Workflow_Status",
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


    //************************************PM30200******************************************
        SUB PM30200(pOwner,pTableName,pDateField)

        LIB CONNECT TO '$(connection)';
        
        trace ($(pOwner),$(pTableName),$(pDateField),$(busunit),$(connection));
        

            [$(pTableName)]:
            SELECT
                VCHRNMBR,
                VENDORID,
                DOCTYPE,
                DOCDATE,
                DOCNUMBR,
                DOCAMNT,
                CURTRXAM,
                DISTKNAM,
                DISCAMNT,
                DSCDLRAM,
                BACHNUMB,
                TRXSORCE,
                BCHSOURC,
                DISCDATE,
                DUEDATE,
                PORDNMBR,
                TEN99AMNT,
                WROFAMNT,
                DISAMTAV,
                TRXDSCRN,
                UN1099AM,
                BKTPURAM,
                BKTFRTAM,
                BKTMSCAM,
                VOIDED,
                HOLD,
                CHEKBKID,
                DINVPDOF,
                PPSAMDED,
                PPSTAXRT,
                PGRAMSBJ,
                GSTDSAMT,
                POSTEDDT,
                PTDUSRID,
                MODIFDT,
                MDFUSRID,
                PYENTTYP,
                CARDNAME,
                PRCHAMNT,
                TRDISAMT,
                MSCCHAMT,
                FRTAMNT,
                TAXAMNT,
                TTLPYMTS,
                CURNCYID,
                PYMTRMID,
                SHIPMTHD,
                TAXSCHID,
                PCHSCHID,
                FRTSCHID,
                MSCSCHID,
                PSTGDATE,
                DISAVTKN,
                CNTRLTYP,
                NOTEINDX,
                PRCTDISC,
                RETNAGAM,
                VOIDPDATE,
                ICTRX,
                "Tax_Date",
                PRCHDATE,
                CORRCTN,
                SIMPLIFD,
                APLYWITH,
                Electronic,
                ECTRX,
                DocPrinted,
                TaxInvReqd,
                VNDCHKNM,
                BackoutTradeDisc,
                CBVAT,
                VADCDTRO,
                TEN99TYPE,
                TEN99BOXNUMBER,
                PONUMBER,
                "Workflow_Status",
                "DEX_ROW_TS",
                "DEX_ROW_ID"
            FROM "$(pOwner)"."dbo"."$(pTableName)"
            WHERE 
                    "$(pDateField)" >= '$(vMinDate)' 
                AND "$(pDateField)" < '$(vMaxDate)'
                ;
            
            IF vReloadType = 1 THEN
                STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd';
                DROP TABLE [$(pTableName)];
            ENDIF

        END SUB;
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//*****************************************************************************************


//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
//**************************************CREATE QVD*****************************************
    SUB CreateQvd(pTableName)

        LET vMaxYear = Year(Today()); 	                // Current year
        LET vMinYear = vMaxYear-$(HistoryYears);

        DO WHILE vMinYear <= vMaxYear
            Trace $(vMinYear);
            
            [$(pTableName)]:
            LOAD *
            FROM 
                [lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vMinYear)*.qvd](qvd);

            LET vMinYear = vMinYear +1;        
        LOOP;

        STORE [$(pTableName)] INTO 'lib://$(Filepath)\$(SourceFolder)\$(pTableName)_$(busunit).qvd';

        DROP TABLE [$(pTableName)];

    END SUB;
//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
//**************************************UPDATE QVD*****************************************
    SUB UpdateQvds(pTableName,pCreateDateField,pPrimaryKey)

        LET vMinYear = vMaxYear-$(HistoryYears);		// Should not exceed max historical extract ever performed

        //Creating a list for all monthly qvd files to be updated
        QvdList:
        Load
            DISTINCT
            Year($(pCreateDateField)) &	Num(Month($(pCreateDateField)),00)	AS YearMonth
        Resident
            $(pTableName)
        Where     
            Year($(pCreateDateField)) >= $(vMinYear);

        For i = 0 to NoOfRows('QvdList')-1
            LET vYearMonth = Peek('YearMonth',i,'QvdList');

            TRACE ;
            TRACE Updating monthly Qvd $(vYearMonth);

            NoConcatenate
            Updated:
            Load
                *
            Resident
                $(pTableName)
            Where
                Year($(pCreateDateField)) &	Num(Month($(pCreateDateField)),00) = $(vYearMonth);

            IF not IsNull(QvdTableName('[lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd]')) THEN
            
                CONCATENATE(Updated)
                Stored:
                LOAD
                    *
                From
                    [lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth)*.qvd](qvd)
                Where 
                    Not Exists($(pPrimaryKey),$(pPrimaryKey));
            ENDIF

            STORE Updated INTO [lib://$(Filepath)\$(SourceFolder)\Incremental\$(pTableName)_$(busunit)_$(vYearMonth).qvd];    
            DROP TABLE Updated;

        Next

        DROP TABLE QvdList;
        DROP TABLE $(pTableName);

    END SUB;
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
//***********************************STATIC TABLE EXTRACT**********************************
    Sub StaticTables
    
        LIB CONNECT TO '$(connection)';
        //vendor table
        [PM00200]:
        SELECT
            VENDORID,
            VENDNAME,
            VNDCHKNM,
            VENDSHNM,
            VADDCDPR,
            VADCDPAD,
            VADCDSFR,
            VADCDTRO,
            VNDCLSID,
            VNDCNTCT,
            ADDRESS1,
            ADDRESS2,
            ADDRESS3,
            CITY,
            STATE,
            ZIPCODE,
            COUNTRY,
            PHNUMBR1,
            PHNUMBR2,
            PHONE3,
            FAXNUMBR,
            UPSZONE,
            SHIPMTHD,
            TAXSCHID,
            ACNMVNDR,
            TXIDNMBR,
            VENDSTTS,
            CURNCYID,
            TXRGNNUM,
            PARVENID,
            TRDDISCT,
            TEN99TYPE,
            TEN99BOXNUMBER,
            MINORDER,
            PYMTRMID,
            MINPYTYP,
            MINPYPCT,
            MINPYDLR,
            MXIAFVND,
            MAXINDLR,
            COMMENT1,
            COMMENT2,
            USERDEF1,
            USERDEF2,
            CRLMTDLR,
            PYMNTPRI,
            KPCALHST,
            KGLDSTHS,
            KPERHIST,
            KPTRXHST,
            HOLD,
            PTCSHACF,
            CREDTLMT,
            WRITEOFF,
            MXWOFAMT,
            SBPPSDED,
            PPSTAXRT,
            DXVARNUM,
            CRTCOMDT,
            CRTEXPDT,
            RTOBUTKN,
            XPDTOBLG,
            PRSPAYEE,
            PMAPINDX,
            PMCSHIDX,
            PMDAVIDX,
            PMDTKIDX,
            PMFINIDX,
            PMMSCHIX,
            PMFRTIDX,
            PMTAXIDX,
            PMWRTIDX,
            PMPRCHIX,
            PMRTNGIX,
            PMTDSCIX,
            ACPURIDX,
            PURPVIDX,
            NOTEINDX,
            CHEKBKID,
            MODIFDT,
            CREATDDT,
            RATETPID,
            "Revalue_Vendor",
            "Post_Results_To",
            FREEONBOARD,
            GOVCRPID,
            GOVINDID,
            DISGRPER,
            DUEGRPER,
            DOCFMTID,
            TaxInvRecvd,
            USERLANG,
            WithholdingType,
            WithholdingFormType,
            WithholdingEntityType,
            TaxFileNumMode,
            BRTHDATE,
            LaborPmtType,
            CCode,
            DECLID,
            CBVAT,
            "Workflow_Approval_Status",
            "Workflow_Priority",
            "Workflow_Status",
            VADCD1099,
            "DEX_ROW_TS",
            "DEX_ROW_ID"
        FROM $(busunit).dbo.PM00200;
        STORE [PM00200] INTO 'lib://$(Filepath)\$(SourceFolder)\PM00200_$(busunit).qvd';
        DROP TABLE [PM00200];

    End Sub;
//-----------------------------------------------------------------------------------------



Call GP_BU_Extract('GP_OLBT','OLBT');
//add repeats for additional BU extractions